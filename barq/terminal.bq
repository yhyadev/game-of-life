std :: @import("std");

width :: 170;
height :: 170;

Generation :: [height][width]u1;

mod :: fn (a : ssize, b : ssize) ssize { return ((a % b) + b) % b; }

display :: fn (gen : *Generation) {
    y : usize = 0;

    while y < height {
        x : usize = 0;

        while x < width {
            if gen[y][x] == 1 {
                std.c.printf("●");
            } else {
                std.c.printf(" ");
            }

            x += 1;
        }

        std.c.printf("\n");

        y += 1;
    }
}

random :: fn (gen : *Generation) {
    y : usize = 0;

    while y < height {
        x : usize = 0;

        while x < width {
            gen[y][x] = (std.c.rand() % 2) as u1;

            x += 1;
        }

        y += 1;
    }
}

calculate_alive_neighbours :: fn (gen : *Generation, ix : usize, iy : usize) u32 {
    amount : u32 = 0;

    dy : ssize = -1;
    
    while dy < 2 {
        dx : ssize = -1;

        while dx < 2 {
            if (dx == 0) & (dy == 0) {
                dx += 1;

                continue;
            }

            x :: mod((ix as ssize + dx), width) as usize;
            y :: mod((iy as ssize + dy), height) as usize;

            amount = amount + gen[y][x];

            dx += 1;
        }

        dy += 1;
    }

    return amount;
}

update :: fn (gen : *Generation) {
    next_gen : Generation;

    y : usize = 0;

    while y < height {
        x : usize = 0;

        while x < width {
            alive_neighbours :: calculate_alive_neighbours(gen, x, y);

            current_cell :: gen[y][x];

            next_state :: (((current_cell == 1) & ((alive_neighbours == 2) | (alive_neighbours == 3)))
                            | ((current_cell == 0) & (alive_neighbours == 3)));

            next_gen[y][x] = next_state as u1;

            x += 1;
        }

        y += 1;
    }

    y = 0;

    while y < height {
        x : usize = 0;

        while x < width {
            gen[y][x] = next_gen[y][x];

            x += 1;
        }

        y += 1;
    }
}

main :: fn () u8 @foreign("main") {
    gen : Generation;

    random(&gen);

    while true {
        display(&gen);
        update(&gen);
    }

    return 0;
}
